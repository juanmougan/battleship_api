def empty_board
  Board.new(
    [
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
    ]
  )
end

def empty_board_except_by(new_values)
  # TODO shouldn't be more than 100 values :)
  empty = empty_board.cells
  puts "empty: #{empty}"
  empty.each_with_index do |n, i|
    row = i//10.as Int32
    col = i % 10.as Int32
    empty[row][col] = n
  end
  return empty
end

# TODO delete this, do something like the previous method
def two_shots
  Board.new(
    [
      [
        "SHIP",
        "SHIP",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
    ]
  )
end

# TODO delete this, do something like the previous method
def one_shot
  Board.new(
    [
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
      ],
      [
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SEA",
        "SHIP",
      ],
    ]
  )
end
